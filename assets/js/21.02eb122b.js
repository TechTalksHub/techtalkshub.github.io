(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{292:function(r,e,o){"use strict";o.r(e);var t=o(14),c=Object(t.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"_2、什么是-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、什么是-docker"}},[r._v("#")]),r._v(" 2、什么是 Docker？")]),r._v(" "),e("p",[r._v("“Docker” 一词指代多种事物，包括开源社区项目、开源项目使用的工具、主导支持此类项目的公司 Docker Inc. 以及该公司官方支持的工具。技术产品和公司使用同一名称，的确让人有点困惑。")]),r._v(" "),e("p",[r._v("我们来简单说明一下：")]),r._v(" "),e("blockquote",[e("p",[r._v("IT 软件中所说的 “Docker” ，是指容器化技术，用于支持创建和使用 Linux 容器。\n开源 Docker 社区致力于改进这类技术，并免费提供给所有用户，使之获益。\nDocker Inc. 公司凭借 Docker 社区产品起家，它主要负责提升社区版本的安全性，并将改进后的版本与更广泛的技术社区分享。此外，它还专门对这些技术产品进行完善和安全固化，以服务于企业客户。")])]),r._v(" "),e("p",[r._v("借助 Docker ，你可将容器当做重量轻、模块化的虚拟机使用。同时，您还将获得高度的灵活性，从而实现对容器的高效创建、部署及复制，并能将其从一个环境顺利迁移至另一个环境。")]),r._v(" "),e("h2",{attrs:{id:"_2-1-docker-如何工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-docker-如何工作"}},[r._v("#")]),r._v(" 2.1 Docker 如何工作？")]),r._v(" "),e("p",[r._v("Docker 技术使用 Linux 内核和内核功能（例如 Cgroups 和 namespaces）来分隔进程，以便各进程相互独立运行。这种独立性正是采用容器的目的所在；它可以独立运行多种进程、多个应用程序，更加充分地发挥基础设施的作用，同时保持各个独立系统的安全性。")]),r._v(" "),e("p",[r._v("容器工具（包括 Docker）可提供基于镜像的部署模式。这使得它能够轻松跨多种环境，与其依赖程序共享应用或服务组。Docker 还可在这一容器环境中自动部署应用程序（或者合并多种流程，以构建单个应用程序）。")]),r._v(" "),e("p",[r._v("此外，由于这些工具基于 Linux 容器构建，使得 Docker 既易于使用，又别具一格 —— 它可为用户提供前所未有的高度应用程访问权限、快速部署以及版本控制和分发能力。")]),r._v(" "),e("h2",{attrs:{id:"_2-2-docker-技术是否与传统的-linux-容器相同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker-技术是否与传统的-linux-容器相同"}},[r._v("#")]),r._v(" 2.2 Docker 技术是否与传统的 Linux 容器相同？")]),r._v(" "),e("p",[r._v("否。Docker 技术最初是基于 LXC 技术构建（大多数人都会将这一技术与“传统的” Linux 容器联系在一起），但后来它逐渐摆脱了对这种技术的依赖。")]),r._v(" "),e("p",[r._v("就轻量级虚拟化这一功能来看，LXC 非常有用，但它无法提供出色的开发人员或用户体验。除了运行容器之外，Docker 技术还具备其他多项功能，包括简化用于构建容器、传输镜像以及控制镜像版本的流程。\n"),e("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/pgc-image/660f80cf035743a1a83f6e4c898fd25a~noop.image?_iz=58558&from=article.pc_detail&x-expires=1681717022&x-signature=fpE4ZRrnsMgxj942WqiFk90C2jM%3D",alt:""}}),r._v("\n传统的 Linux 容器使用 init 系统来管理多种进程。这意味着，所有应用程序都作为一个整体运行。与此相反，Docker 技术鼓励应用程序各自独立运行其进程，并提供相应工具以实现这一功能。这种精细化运作模式自有其优势。")]),r._v(" "),e("h2",{attrs:{id:"_2-3-docker的目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-docker的目标"}},[r._v("#")]),r._v(" 2.3 docker的目标")]),r._v(" "),e("p",[r._v('docker的主要目标是"Build,Ship and Run any App,Angwhere",构建，运输，处处运行')]),r._v(" "),e("p",[e("strong",[r._v("构建")]),r._v("：做一个docker镜像")]),r._v(" "),e("p",[e("strong",[r._v("运输")]),r._v("：docker pull")]),r._v(" "),e("p",[e("strong",[r._v("运行")]),r._v("：启动一个容器")]),r._v(" "),e("p",[r._v("每一个容器，他都有自己的文件系统rootfs.")])])}),[],!1,null,null,null);e.default=c.exports}}]);