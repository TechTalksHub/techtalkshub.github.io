(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{284:function(t,a,i){"use strict";i.r(a);var e=i(14),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1、-容器简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-容器简介"}},[t._v("#")]),t._v(" 1、 容器简介")]),t._v(" "),a("h2",{attrs:{id:"_1-1-什么是-linux-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是-linux-容器"}},[t._v("#")]),t._v(" 1.1 什么是 Linux 容器")]),t._v(" "),a("p",[t._v("Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/pgc-image/cc8e29ae34844b1cbdeb13d493e1cf9e~noop.image?_iz=58558&from=article.pc_detail&x-expires=1681717022&x-signature=A33hCUqi85cpha681WEs61OZRYA%3D",alt:""}})]),t._v(" "),a("p",[t._v("更加详细地来说，在开发一个应用时。你使用的是一台笔记本电脑，而且你的开发环境具有特定的配置。其他开发人员身处的环境配置可能稍有不同。你正在开发的应用依赖于你当前的配置，还要依赖于某些特定文件。与此同时，你的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。您希望尽可能多在本地模拟这些环境，而不产生重新创建服务器环境的开销。\n因此，要如何确保应用能够在这些环境中运行和通过质量检测，并且在部署过程中不出现令人头疼的问题，也无需重新编写代码和进行故障修复？答案就是使用容器。容器可以确保你的应用拥有必需的配置和文件，使得这些应用能够在从开发到测试、再到生产的整个流程中顺利运行，而不出现任何不良问题。这样可以避免危机，做到皆大欢喜。")]),t._v(" "),a("p",[t._v("虽然这只是简化的示例，但在需要很高的可移植性、可配置性和隔离的情况下，我们可以利用 Linux 容器通过很多方式解决难题。无论基础架构是在企业内部还是在云端，或者混合使用两者，容器都能满足你的需求")]),t._v(" "),a("h2",{attrs:{id:"_1-2-容器不就是虚拟化吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-容器不就是虚拟化吗"}},[t._v("#")]),t._v(" 1.2 容器不就是虚拟化吗")]),t._v(" "),a("p",[t._v("是，但也不全是。我们用一种简单方式来思考一下：\n虚拟化使得许多操作系统可同时在单个系统上运行。\n容器则可共享同一个操作系统内核，将应用进程与系统其他部分隔离开。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/pgc-image/db58c83b884a443581fc320fd7f7bbb3~noop.image?_iz=58558&from=article.pc_detail&x-expires=1681717022&x-signature=VVJkTkzJpv4Fn%2FiB3TiCo8PsGfQ%3D",alt:""}}),t._v("\n这意味着什么？首先，让多个操作系统在单个虚拟机监控程序上运行以实现虚拟化，并不能达成和使用容器同等的轻量级效果。事实上，在仅拥有容量有限的有限资源时，您需要能够可以进行密集部署的轻量级应用。Linux 容器可从单个操作系统运行，在所有容器中共享该操作系统，因此应用和服务能够保持轻量级，并行快速运行。")]),t._v(" "),a("h2",{attrs:{id:"_1-3-容器发展简史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-容器发展简史"}},[t._v("#")]),t._v(" 1.3 容器发展简史")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/pgc-image/897ad00a6841420db21975e950f2102a~noop.image?_iz=58558&from=article.pc_detail&x-expires=1681717022&x-signature=gLONPW0IBCjVXTm7hnt8vS7QpQY%3D",alt:""}}),t._v("\n我们现在称为容器技术的概念最初出现在 2000 年，当时称为 FreeBSD jail，这种技术可将 FreeBSD 系统分区为多个子系统（也称为 Jail）。Jail 是作为安全环境而开发的，系统管理员可与企业内部或外部的多个用户共享这些 Jail。")]),t._v(" "),a("p",[t._v("Jail 的目的是让进程在经过修改的 chroot 环境中创建，而不会脱离和影响整个系统 — 在 chroot 环境中，对文件系统、网络和用户的访问都实现了虚拟化。尽管 Jail 在实施方面存在局限性，但最终人们找到了脱离这种隔离环境的方法。")]),t._v(" "),a("p",[t._v("但这个概念非常有吸引力。")]),t._v(" "),a("p",[t._v("2001 年，通过 Jacques Gélinas 的 VServer 项目，隔离环境的实施进入了 Linux 领域。正如 Gélinas 所说，这项工作的目的是“在高度独立且安全的单一环境中运行多个通用 Linux 服务器 [sic]。” 在完成了这项针对 Linux 中多个受控制用户空间的基础性工作后，Linux 容器开始逐渐成形并最终发展成了现在的模样。")])])}),[],!1,null,null,null);a.default=s.exports}}]);