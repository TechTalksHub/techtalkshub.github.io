(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{311:function(t,a,s){"use strict";s.r(a);var r=s(14),i=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、事务"}},[t._v("#")]),t._v(" 一、事务")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#一、事务"}},[t._v("一、事务")]),a("ul",[a("li",[a("a",{attrs:{href:"#概念"}},[t._v("概念")])]),a("li",[a("a",{attrs:{href:"#acid"}},[t._v("ACID")])]),a("li",[a("a",{attrs:{href:"#autocommit"}},[t._v("AUTOCOMMIT")])])])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222237925.png"}})]),a("br"),t._v(" "),a("h3",{attrs:{id:"acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),a("h4",{attrs:{id:"_1-原子性-atomicity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原子性-atomicity"}},[t._v("#")]),t._v(" 1. 原子性（Atomicity）")]),t._v(" "),a("p",[t._v("事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。")]),t._v(" "),a("p",[t._v("回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。")]),t._v(" "),a("h4",{attrs:{id:"_2-一致性-consistency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-一致性-consistency"}},[t._v("#")]),t._v(" 2. 一致性（Consistency）")]),t._v(" "),a("p",[t._v("数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。")]),t._v(" "),a("h4",{attrs:{id:"_3-隔离性-isolation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-隔离性-isolation"}},[t._v("#")]),t._v(" 3. 隔离性（Isolation）")]),t._v(" "),a("p",[t._v("一个事务所做的修改在最终提交以前，对其它事务是不可见的。")]),t._v(" "),a("h4",{attrs:{id:"_4-持久性-durability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-持久性-durability"}},[t._v("#")]),t._v(" 4. 持久性（Durability）")]),t._v(" "),a("p",[t._v("一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。")]),t._v(" "),a("p",[t._v("系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：")]),t._v(" "),a("ul",[a("li",[t._v("只有满足一致性，事务的执行结果才是正确的。")]),t._v(" "),a("li",[t._v("在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。")]),t._v(" "),a("li",[t._v("在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。")]),t._v(" "),a("li",[t._v("事务满足持久化是为了能应对系统崩溃的情况。")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207210437023.png"}})]),a("br"),t._v(" "),a("h3",{attrs:{id:"autocommit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocommit"}},[t._v("#")]),t._v(" AUTOCOMMIT")]),t._v(" "),a("p",[t._v("MySQL 默认采用自动提交模式。也就是说，如果不显式使用"),a("code",[t._v("START TRANSACTION")]),t._v("语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。")])])}),[],!1,null,null,null);a.default=i.exports}}]);